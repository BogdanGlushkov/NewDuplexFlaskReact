import React, { useState, useEffect } from 'react';
import '../css/ScheduleSettings.css';

const ScheduleSettings = ({ onSave, onClose, initialValue, currentType, currentTime, currentTemplate, currentInterval, selectedCells, setCurrentType, setCurrentTime, setCurrentTemplate, setCurrentInterval, setSelectedCells }) => {
  const [workingDays, setWorkingDays] = useState({
    –ü–Ω: true, –í—Ç: true, –°—Ä: true, –ß—Ç: true, –ü—Ç: true, –°–±: false, –í—Å: false,
  });
  const [interval, setInterval] = useState(2);
  const [breaks, setBreaks] = useState([]);

  useEffect(() => {
    if (initialValue) {
      setWorkingDays(prevWorkingDays => ({
        ...prevWorkingDays,
        ...initialValue.workingDays
      }));
      setInterval(initialValue.interval || 2);
      setCurrentType(initialValue.type || '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å');
      setCurrentTime({ start: initialValue.start || '10:00', end: initialValue.end || '22:00' });
      setCurrentTemplate(initialValue.template || '–ë–µ–∑ —à–∞–±–ª–æ–Ω–∞');
      setCurrentInterval({ start: initialValue.intStart || 2, end: initialValue.intEnd || 2 });
      setBreaks(initialValue.breaks || []);
    }
  }, [initialValue, setCurrentType, setCurrentTime, setCurrentTemplate, setCurrentInterval]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCurrentTime(prevCurrentTime => ({
      ...prevCurrentTime,
      [name]: value
    }));
  };

  const handleIntervalChange = (e) => {
    const { name, value } = e.target;
    setCurrentInterval(prevCurrentInterval => ({
      ...prevCurrentInterval,
      [name]: value
    }));
  };

  const handleWorkingDayChange = (day) => {
    setWorkingDays(prevDays => ({ ...prevDays, [day]: !prevDays[day] }));
    // updateSelectedCells();
  };

  // const updateSelectedCells = () => {
  //   const newSelectedCells = [];

  //   Object.keys(workingDays).forEach(day => {
  //     if (workingDays[day]) {
  //       selectedCells.forEach(cell => {
  //         if (cell.date === day) {
  //           newSelectedCells.push({ date: cell.date, user: cell.user });
  //         }
  //       });
  //     }
  //   });

  //   setSelectedCells(newSelectedCells);
  // };

  const handleSubmit = () => {
    onSave({ ...currentTime, workingDays, interval, type: currentType, breaks });

  };

  const showWorkTime = currentType === '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å';
  const showWorkingDays = currentTemplate === '–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏';
  const showIntervalDates = currentTemplate === '–ü–æ —Å–º–µ–Ω–∞–º';
  const showInterval = currentTemplate !== '–ë–µ–∑ —à–∞–±–ª–æ–Ω–∞';


  const addBreak = () => {
    setBreaks([...breaks, { start: '12:00', end: '13:00' }]);
  };

  const removeBreak = (index) => {
    setBreaks(breaks.filter((_, i) => i !== index));
  };


  return (
    <div className="schedule-settings">
      <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞</h2>

      <label>–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞</label>
      <select value={currentTemplate} onChange={(e) => setCurrentTemplate(e.target.value)}>
        <option value="–ë–µ–∑ —à–∞–±–ª–æ–Ω–∞">–ë–µ–∑ —à–∞–±–ª–æ–Ω–∞</option>
        {/* <option value="–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏">–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</option> */}
        {/* <option value="–ü–æ —Å–º–µ–Ω–∞–º">–ü–æ —Å–º–µ–Ω–∞–º</option> */}
      </select>

      {showWorkingDays && (  
        <div className="WorkingDays">
          <label>–†–∞–±–æ—á–∏–µ –¥–Ω–∏</label>
          <div className="working-days">
            {Object.keys(workingDays).map(day => (
              <label key={day}>
                <input
                  type="checkbox"
                  checked={workingDays[day]}
                  onChange={() => handleWorkingDayChange(day)}
                />
                {day}
              </label>
            ))}
          </div>
        </div>
      )}

      {showIntervalDates && (
        <div className="WorkingDays">
          <label>–†–∞–±–æ—á–∏–µ / –≤—ã—Ö–æ–¥–Ω—ã–µ</label>
          <div className="interval">
            <input
              type="number"
              name="intStart"
              value={currentInterval.intStart}
              onChange={handleIntervalChange}
            />
            <p>—á–µ—Ä–µ–∑</p>
            <input
              type="number"
              name="intEnd"
              value={currentInterval.intEnd}
              onChange={handleIntervalChange}
            />
          </div>
        </div>
      )}

      {showInterval && (
        <>
        <label>–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–µ–π—Å—Ç–≤–∏—è </label>
        <div className="interval">
        <input
          type="number"
          value={interval}
          onChange={(e) => setInterval(Number(e.target.value))}
        />
        <p>(–Ω–µ–¥–µ–ª–∏)</p>
        </div>
        </>
      )}
        
        
      

      <label>–¢–∏–ø</label>
      <select value={currentType} onChange={(e) => setCurrentType(e.target.value)}>
        <option value="–†–∞–±–æ—á–∏–π –¥–µ–Ω—å">üíº –†–∞–±–æ—á–∏–π –¥–µ–Ω—å</option>
        <option value="–í—ã—Ö–æ–¥–Ω–æ–π">üóë –í—ã—Ö–æ–¥–Ω–æ–π</option>
        <option value="–ë–æ–ª—å–Ω–∏—á–Ω—ã–π">‚úö –ë–æ–ª—å–Ω–∏—á–Ω—ã–π</option>
        <option value="–û—Ç–ø—É—Å–∫">‚õ± –û—Ç–ø—É—Å–∫</option>
        {/* <option value="–í—ã—Ö–æ–¥–Ω–æ–π –∑–∞ —Å–≤–æ–π —Å—á–µ—Ç">‚úâ –í—ã—Ö–æ–¥–Ω–æ–π –∑–∞ —Å–≤–æ–π —Å—á–µ—Ç </option> */}
        <option value="–ü—Ä–æ–≥—É–ª">‚úñ –ü—Ä–æ–≥—É–ª</option>
        {/* <option value="–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π">‚úâ –û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π </option> */}
      </select>

      {showWorkTime && (
        <div className="WorkTime">
          <label>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</label>
          <div className="time-change">
            <input
              type="time"
              name="start"
              value={currentTime.start}
              onChange={handleChange}
            />
            <p> ‚Äî </p>
            <input
              type="time"
              name="end"
              value={currentTime.end}
              onChange={handleChange}
            />
          </div>
          {breaks.map((breakTime, index) => (
            <div className="break-time" key={index}>
              <label>–ü–µ—Ä–µ—Ä—ã–≤</label>
              <div className="time-change">
                <input
                  type="time"
                  name="start"
                  value={breakTime.start}
                  onChange={(e) => {
                    const newBreaks = [...breaks];
                    newBreaks[index].start = e.target.value;
                    setBreaks(newBreaks);
                  }}
                />
                <p> ‚Äî </p>
                <input
                  type="time"
                  name="end"
                  value={breakTime.end}
                  onChange={(e) => {
                    const newBreaks = [...breaks];
                    newBreaks[index].end = e.target.value;
                    setBreaks(newBreaks);
                  }}
                />
                <span onClick={() => removeBreak(index)}>
                üóë
                </span>
              </div>
              
            </div>
          ))}
          <span className="AddBreak" onClick={addBreak}>
            + –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
          </span>
        </div>
      )}
      

      <div className="btn-bottom">
        <button onClick={handleSubmit}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button onClick={onClose}>–û—Ç–º–µ–Ω–∏—Ç—å</button>
      </div>
    </div>
  );
};

export default ScheduleSettings;
